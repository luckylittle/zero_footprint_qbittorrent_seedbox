---
# tasks file for zero_footprint_qbittorrent_seedbox/08-smoke_test

- name: TEST | 8.1 Populate service_facts
  ansible.builtin.service_facts:
  tags:
    - smoke_tests

- name: TEST | 8.2 Print ACTIVE service(s)
  ansible.builtin.debug:
    var: ansible_facts['services'].values() |
          selectattr('state','equalto','active') |
          map(attribute='name') | list
  tags:
    - smoke_tests

- name: TEST | 8.3 Print INACTIVE service(s)
  ansible.builtin.debug:
    var: ansible_facts['services'].values() |
          selectattr('state','equalto','inactive') |
          map(attribute='name') | list
  tags:
    - smoke_tests

- name: TEST | 8.4 Print RUNNING service(s)
  ansible.builtin.debug:
    var: ansible_facts['services'].values() |
          selectattr('state','equalto','running') |
          map(attribute='name') | list
  tags:
    - smoke_tests

- name: TEST | 8.5 Print STOPPED service(s)
  ansible.builtin.debug:
    var: ansible_facts['services'].values() |
          selectattr('state','equalto','stopped') |
          map(attribute='name') | list
  tags:
    - smoke_tests

- name: TEST | 8.6 Print UNKNOWN service(s)
  ansible.builtin.debug:
    var: ansible_facts['services'].values() |
          selectattr('state','equalto','unknown') |
          map(attribute='name') | list
  tags:
    - smoke_tests

- name: TEST | 8.7 Check for port 22 to be open and contain "OpenSSH"
  ansible.builtin.wait_for:
    host: "{{ hostvars[inventory_hostname].ansible_host | \
          default(inventory_hostname) }}"
    port: "{{ ssh_port }}"
    search_regex: "OpenSSH"
    timeout: "{{ test_timeout }}"
  register: test_ssh
  delegate_to: localhost
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.8 Check for FTP port to be open and contain "220 Welcome to"
  ansible.builtin.wait_for:
    host: "{{ hostvars[inventory_hostname].ansible_host | \
          default(inventory_hostname) }}"
    port: "{{ ftp_port }}"
    search_regex: "220 Welcome to"
    timeout: "{{ test_timeout }}"
  register: test_ftp
  delegate_to: localhost
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.9 Check for qBt port to be open
  ansible.builtin.wait_for:
    host: "{{ hostvars[inventory_hostname].ansible_host | \
          default(inventory_hostname) }}"
    port: "{{ qbt_port }}"
    timeout: "{{ test_timeout }}"
  register: test_qbt
  delegate_to: localhost
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.10 Check for qBt HTTP endpoint to be open
  ansible.builtin.uri:
    url: "http://{{ hostvars[inventory_hostname].ansible_host \
          | default(inventory_hostname) }}:{{ qbt_preferences_webuiport }}"
    return_content: true
    timeout: "{{ test_timeout }}"
  register: test_http
  delegate_to: localhost
  failed_when: "test_http.status != 200 or \
                'qBittorrent' not in test_http.content"
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.11 Check for Autobrr to be responding
  ansible.builtin.uri:
    url: "http://{{ hostvars[inventory_hostname].ansible_host | \
          default(inventory_hostname) }}:{{ autobrr_cfg_port }}"
    return_content: true
    timeout: "{{ test_timeout }}"
  register: test_autobrr
  delegate_to: localhost
  failed_when: "test_autobrr.status != 200 or \
                'autobrr' not in test_autobrr.content"
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.12 Check for Autobrr healtcheck to be reporting OK
  ansible.builtin.uri:
    url: "http://{{ hostvars[inventory_hostname].ansible_host | \
          default(inventory_hostname) }}:{{ autobrr_cfg_port }}/api/\
          healthz/liveness"
    return_content: true
    timeout: "{{ test_timeout }}"
  register: healthz_autobrr
  delegate_to: localhost
  failed_when: "healthz_autobrr.status != 200 or \
                'OK' not in healthz_autobrr.content"
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.13 Check for cross-seed webhook to be responding
  ansible.builtin.uri:
    url: "http://127.0.0.1:{{ cross_seed_port }}/api/webhook?\
          apikey={{ cross_seed_api_key }}"
    return_content: true
    method: "POST"
    body_format: "json"
    body: |
      {
        "infoHash": "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ0123",
        "includeSingleEpisodes": "true"
      }
    timeout: "{{ test_timeout }}"
  register: test_cross_seed
  until: test_cross_seed.status == 204
  retries: 6
  delay: 10
  failed_when: "test_cross_seed.status != 204"
  changed_when: false
  when: cross_seed
  tags:
    - smoke_tests

- name: TEST | 8.14 Check for Netronome to be responding
  ansible.builtin.uri:
    url: "http://{{ hostvars[inventory_hostname].ansible_host | \
          default(inventory_hostname) }}:{{ netronome_cfg_port }}"
    return_content: true
    timeout: "{{ test_timeout }}"
  register: test_netronome
  delegate_to: localhost
  failed_when: "test_netronome.status != 200 or \
                'netronome' not in test_netronome.content"
  changed_when: false
  tags:
    - smoke_tests

- name: TEST | 8.15 Show the smoke test results
  ansible.builtin.debug:
    msg:
      - "Results:"
      - "########"
      - "SSH:               {{ test_ssh.state }}"
      - "FTP:               {{ test_ftp.state | default('Not Run') }}"
      - "QBT:               {{ test_qbt.state | default('Not Run') }}"
      - "QBT WEBUI:         {{ 'Passed' if not test_http.failed else
                              'Failed (status ' +
                              (test_http.status | string) + ')' }}"
      - "AUTOBRR:           {{ 'Passed' if not test_autobrr.failed else
                              'Failed (status ' +
                              (test_autobrr.status | string) + ')' }}"
      - "AUTOBRR HEALTHZ:   {{ 'Passed' if not healthz_autobrr.failed else
                              'Failed (status ' +
                              (healthz_autobrr.status | string) + ')' }}"
      - "CROSS-SEED:        {{ 'Skipped' if (test_cross_seed is not defined
                            or test_cross_seed.get('skipped', false))
                            else ('Failed (status ' + (test_cross_seed.status
                            | string) + ')' if test_cross_seed.failed
                            else 'Passed')
                            }}"
      - "NETRONOME:         {{ 'Passed' if not test_netronome.failed else
                              'Failed (status ' +
                              (test_netronome.status | string) + ')' }}"
      - "########"
  tags:
    - smoke_tests

- name: TEST | 8.16 Output
  ansible.builtin.debug:
    msg:
      - "------------------------------------------------------------"
      - "Autobrr URL:"
      - "http://{{ (ansible_ssh_host | \
          default(ansible_host)) | default(inventory_hostname) }}:\
          {{ autobrr_cfg_port }}/\
          onboard"
      - "------------------------------------------------------------"
      - "Autobrr Healthz URL:"
      - "http://{{ (ansible_ssh_host | \
          default(ansible_host)) | default(inventory_hostname) }}:\
          {{ autobrr_cfg_port }}/\
          api/healthz/liveness"
      - "------------------------------------------------------------"
      - "qBt WebUI:"
      - "http://{{ (ansible_ssh_host | \
          default(ansible_host)) | default(inventory_hostname) }}:\
          {{ qbt_preferences_webuiport }}"
      - "------------------------------------------------------------"
      - "Netronome URL:"
      - "http://{{ (ansible_ssh_host | \
          default(ansible_host)) | default(inventory_hostname) }}:\
          {{ netronome_cfg_port }}"
      - "------------------------------------------------------------"
      - "vsFTPd URL:"
      - "ftps://{{ (ansible_ssh_host | default(ansible_host)) | \
          default(inventory_hostname) }}:{{ ftp_port }}"
      - "------------------------------------------------------------"
  tags:
    - smoke_tests
